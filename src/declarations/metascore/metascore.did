type StreamingStrategy = variant {
                           Callback:
                            record {
                              callback:
                               func (StreamingCallbackToken) ->
                                (StreamingCallbackHttpResponse) query;
                              token: StreamingCallbackToken;
                            };};
type StreamingCallbackToken = 
 record {
   content_encoding: text;
   index: nat;
   key: text;
   sha256: opt vec nat8;
 };
type StreamingCallbackHttpResponse = 
 record {
   body: vec nat8;
   token: opt StreamingCallbackToken;
 };
type Result = 
 variant {
   err: text;
   ok;
 };
type Player = 
 variant {
   plug: text;
   stoic: text;
 };
type Metascore = 
 service {
   cron: () -> ();
   getGameScoreComponent: (principal, Player) -> (opt nat) query;
   getMetascore: (Player) -> (nat) query;
   getOverallRanking: (principal) -> (vec Player) query;
   getPercentile: (principal, Player) -> (opt float64) query;
   getRanking: (principal, Player) -> (opt nat) query;
   http_request: (HttpRequest) -> (HttpResponse) query;
   register: (principal) -> (Result);
   registerGame: (Metadata) -> ();
 };
type Metadata = record {name: text;};
type HttpResponse = 
 record {
   body: vec nat8;
   headers: vec HeaderField;
   status_code: nat16;
   streaming_strategy: opt StreamingStrategy;
 };
type HttpRequest = 
 record {
   body: vec nat8;
   headers: vec HeaderField;
   method: text;
   url: text;
 };
type HeaderField = 
 record {
   text;
   text;
 };
service : () -> Metascore
