type StreamingStrategy = variant {
                           Callback:
                            record {
                              callback:
                               func (StreamingCallbackToken) ->
                                (StreamingCallbackHttpResponse) query;
                              token: StreamingCallbackToken;
                            };};
type StreamingCallbackToken = 
 record {
   content_encoding: text;
   index: nat;
   key: text;
   sha256: opt vec nat8;
 };
type StreamingCallbackHttpResponse = 
 record {
   body: vec nat8;
   token: opt StreamingCallbackToken;
 };
type Score = 
 record {
   Player;
   nat;
 };
type Result_1 = 
 variant {
   err;
   ok: AccountRecord;
 };
type Result = 
 variant {
   err: text;
   ok;
 };
type Player = 
 variant {
   plug: principal;
   stoic: principal;
 };
type Metascore = 
 service {
   addAdmin: (principal) -> ();
   authenticateAccount: (AuthRequest) -> (AuthResponse);
   cron: () -> ();
   getAccount: (nat) -> (Result_1) query;
   getGameScores: (GamePrincipal, opt nat, opt nat) -> (vec Score) query;
   getGames: () -> (vec record {
                          GamePrincipal;
                          Metadata;
                        }) query;
   getMetascore: (GamePrincipal, Player) -> (nat) query;
   getMetascores: (opt nat, opt nat) -> (vec nat) query;
   getOverallMetascore: (Player) -> (nat) query;
   getPercentile: (GamePrincipal, Player) -> (opt float64) query;
   getPercentileMetascore: (float64) -> (nat) query;
   getPlayerCount: () -> (nat) query;
   getRanking: (GamePrincipal, Player) -> (opt nat) query;
   getScoreCount: () -> (nat) query;
   getTop: (nat) -> (vec Score) query;
   http_request: (HttpRequest) -> (HttpResponse) query;
   isAdmin: (principal) -> (bool) query;
   register: (GamePrincipal) -> (Result);
   registerGame: (Metadata) -> ();
   removeAdmin: (principal) -> ();
   scoreUpdate: (vec Score) -> ();
   unregister: (GamePrincipal) -> ();
 };
type Metadata = 
 record {
   flavorText: opt text;
   name: text;
   playUrl: text;
 };
type HttpResponse = 
 record {
   body: vec nat8;
   headers: vec HeaderField;
   status_code: nat16;
   streaming_strategy: opt StreamingStrategy;
 };
type HttpRequest = 
 record {
   body: vec nat8;
   headers: vec HeaderField;
   method: text;
   url: text;
 };
type HeaderField = 
 record {
   text;
   text;
 };
type GamePrincipal = principal;
type AuthResponse = 
 variant {
   err: record {message: text;};
   ok: record {
         account: AccountRecord;
         message: text;
       };
   pendingConfirmation: record {message: text;};
   pendingDuplicate:
    record {
      accounts: record {
                  AccountRecord;
                  AccountRecord;
                };
      message: text;
    };
 };
type AuthRequest = 
 variant {
   authenticate: Player;
   link: Player;
 };
type AccountRecord = 
 record {
   alias: opt text;
   avatar: opt text;
   flavorText: opt text;
   id: AccountId;
   plugAddress: opt principal;
   primaryWallet: Player;
   stoicAddress: opt principal;
 };
type AccountId = nat;
service : () -> Metascore
